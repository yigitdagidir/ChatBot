package com.bye_bye.cmp2204;

import android.app.Application;
import androidx.lifecycle.AndroidViewModel;
import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.Observer;
import androidx.lifecycle.ViewModelProvider;
import androidx.lifecycle.ViewModelStoreOwner;
import java.util.ArrayList;
import java.util.List;

public class SidebarViewModel extends AndroidViewModel {
    private final ChatRepository repository;
    private final LiveData<List<ChatSession>> sessions;
    private final MutableLiveData<ChatSession> currentSession;
    private final SharedViewModel sharedViewModel;
    
    private final Observer<ChatSession> sessionObserver = new Observer<ChatSession>() {
        @Override
        public void onChanged(ChatSession session) {
            if (session != null) {
                currentSession.setValue(session);
            }
        }
    };
    
    private final Observer<Boolean> resetObserver = new Observer<Boolean>() {
        @Override
        public void onChanged(Boolean reset) {
            if (reset != null && reset) {
                // Reset has occurred, clear current session and wait for new one
                currentSession.setValue(null);
            }
        }
    };

    public SidebarViewModel(Application application) {
        super(application);
        repository = new ChatRepository(application);
        sessions = repository.getAllSessions();
        currentSession = new MutableLiveData<>();
        
        // Get the SharedViewModel
        ViewModelStoreOwner viewModelStoreOwner = (ViewModelStoreOwner) application;
        sharedViewModel = new ViewModelProvider(viewModelStoreOwner).get(SharedViewModel.class);
        
        // Observe the shared view model's selected session
        sharedViewModel.getSelectedSession().observeForever(sessionObserver);
        
        // Observe reset events
        sharedViewModel.isSessionReset().observeForever(resetObserver);
        
        // Add some dummy sessions for testing if database is empty
        addDummySessionsIfEmpty();
    }
    
    @Override
    protected void onCleared() {
        super.onCleared();
        // Stop observing when ViewModel is cleared
        sharedViewModel.getSelectedSession().removeObserver(sessionObserver);
        sharedViewModel.isSessionReset().removeObserver(resetObserver);
    }
    
    private void addDummySessionsIfEmpty() {
        // We'll check in the repository if sessions exist, and if not, add some samples
        if (sessions.getValue() == null || sessions.getValue().isEmpty()) {
            // Create a few dummy sessions
            ChatSession session1 = new ChatSession("New Chat", "openai");
            long session1Id = repository.insertSessionSync(session1);
            
            ChatSession session2 = new ChatSession("Previous Chat", "openai");
            session2.setLastMessageTime(System.currentTimeMillis() - 3600000); // 1 hour ago
            long session2Id = repository.insertSessionSync(session2);
            
            // Add a dummy message to each session
            ChatMessage message1 = new ChatMessage("Hello, how can I help you?", false, session1Id);
            repository.insertMessageSync(message1);
            
            ChatMessage message2 = new ChatMessage("Tell me about AI", true, session2Id);
            repository.insertMessageSync(message2);
            
            ChatMessage message3 = new ChatMessage("AI stands for Artificial Intelligence...", false, session2Id);
            repository.insertMessageSync(message3);
            
            // Select the first session by default
            session1.setId(session1Id);
            currentSession.setValue(session1);
            sharedViewModel.selectSession(session1);
        }
    }

    public LiveData<List<ChatSession>> getSessions() {
        return sessions;
    }

    public LiveData<ChatSession> getCurrentSession() {
        return currentSession;
    }

    public void createNewSession() {
        // Create a new session with default title and model
        ChatSession newSession = new ChatSession("New Chat", "openai");
        repository.insertSession(newSession);
        
        // Wait briefly to ensure the session ID is generated by Room
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        
        // Fallback ID if needed
        if (newSession.getId() <= 0) {
            newSession.setId(System.currentTimeMillis());
        }
        
        currentSession.setValue(newSession);
        
        // Share the selected session with other components
        sharedViewModel.selectSession(newSession);
    }

    public void setCurrentSession(ChatSession session) {
        if (session != null) {
            currentSession.setValue(session);
            
            // Share the selected session with other components
            sharedViewModel.selectSession(session);
        } else {
            // Handle null session - select/create a default one
            createNewSession();
        }
    }

    public void updateSessionTitle(long sessionId, String newTitle) {
        if (sessionId > 0) {
            ChatSession session = new ChatSession(newTitle, "openai");
            session.setId(sessionId);
            repository.updateSession(session);
        }
    }

    public void deleteSession(ChatSession session) {
        if (session != null) {
            repository.deleteSession(session);
            
            if (currentSession.getValue() != null && 
                currentSession.getValue().getId() == session.getId()) {
                currentSession.setValue(null);
                
                // Create a new session if this was the last one
                createNewSession();
            }
        }
    }
} 